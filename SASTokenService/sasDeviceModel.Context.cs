//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Daenet
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class sasDeviceEntities : DbContext
    {
        public sasDeviceEntities()
            : base("name=sasDeviceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<SasDeviceDetail> SasDeviceDetails { get; set; }
    
        public virtual int USP_SasDevice_Delete(Nullable<int> deviceId)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SasDevice_Delete", deviceIdParameter);
        }
    
        public virtual ObjectResult<string> USP_SasDevice_Insert(string deviceKey, Nullable<System.DateTime> keyValidity, string deviceName, string ip, string owner, string location, ObjectParameter iD)
        {
            var deviceKeyParameter = deviceKey != null ?
                new ObjectParameter("DeviceKey", deviceKey) :
                new ObjectParameter("DeviceKey", typeof(string));
    
            var keyValidityParameter = keyValidity.HasValue ?
                new ObjectParameter("KeyValidity", keyValidity) :
                new ObjectParameter("KeyValidity", typeof(System.DateTime));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_SasDevice_Insert", deviceKeyParameter, keyValidityParameter, deviceNameParameter, ipParameter, ownerParameter, locationParameter);
        }
    
        public virtual ObjectResult<USP_SasDevice_Select_Result> USP_SasDevice_Select(string stringToFind, Nullable<int> deviceId)
        {
            var stringToFindParameter = stringToFind != null ?
                new ObjectParameter("StringToFind", stringToFind) :
                new ObjectParameter("StringToFind", typeof(string));
    
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SasDevice_Select_Result>("USP_SasDevice_Select", stringToFindParameter, deviceIdParameter);
        }
    
        public virtual ObjectResult<string> USP_SasDevice_Update(Nullable<int> deviceId, string deviceKey, Nullable<System.DateTime> keyValidity, string deviceName, string ip, string owner, string location)
        {
            var deviceIdParameter = deviceId.HasValue ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(int));
    
            var deviceKeyParameter = deviceKey != null ?
                new ObjectParameter("DeviceKey", deviceKey) :
                new ObjectParameter("DeviceKey", typeof(string));
    
            var keyValidityParameter = keyValidity.HasValue ?
                new ObjectParameter("KeyValidity", keyValidity) :
                new ObjectParameter("KeyValidity", typeof(System.DateTime));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_SasDevice_Update", deviceIdParameter, deviceKeyParameter, keyValidityParameter, deviceNameParameter, ipParameter, ownerParameter, locationParameter);
        }
    }
}
